{"version":3,"sources":["component/Apps/NewTask.js","component/Apps/TaskList.js","component/Apps/A_TodoList.js","reportWebVitals.js","index.js"],"names":["NewTask","newTask","handleChange","handleSubmit","onSubmit","name","placeholder","value","title","onChange","type","TasksList","allTasks","handleDelete","map","id","onClick","A_TodoList","useState","setNewTask","setAllTasks","target","prev","Date","now","event","preventDefault","taskIdToRemove","filter","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAEe,SAASA,EAAT,GACd,IADiCC,EAClC,EADkCA,QAASC,EAC3C,EAD2CA,aAAcC,EACzD,EADyDA,aAEvD,OACE,uBAAMC,SAAUD,EAAhB,UACE,uBACEE,KAAK,QACLC,YAAY,WACZC,MAAON,EAAQO,OAAS,GACxBC,SAAUP,IAEZ,wBAAQQ,KAAK,SAAb,yBCVS,SAASC,EAAT,GAAgD,IAA3BC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,aAC5C,OACE,6BACGD,EAASE,KAAI,gBAAGN,EAAH,EAAGA,MAAOO,EAAV,EAAUA,GAAV,OACZ,6BACE,gCACE,6BAAKP,IACL,wBAAQQ,QAAS,kBAAMH,EAAaE,IAApC,mBAHKA,QCFF,SAASE,IAItB,MAA8BC,mBAAS,IAAvC,mBAAOjB,EAAP,KAAgBkB,EAAhB,KAiBA,EAAgCD,mBAAS,IAAzC,mBAAON,EAAP,KAAiBQ,EAAjB,KAiBA,OACE,iCACE,2CACA,cAACpB,EAAD,CACEC,QAASA,EACTC,aArCe,SAAC,GAAgB,IAAdmB,EAAa,EAAbA,OAIdhB,EAAgBgB,EAAhBhB,KAAME,EAAUc,EAAVd,MAGdY,GAAW,SAACG,GAAD,mBAAC,eACLA,GADI,gBAEPP,GAAIQ,KAAKC,OAERnB,EAAOE,QA2BRJ,aAtBe,SAACsB,GAEpBA,EAAMC,iBACDzB,EAAQO,QAEbY,GAAY,SAACE,GAAD,OAAWrB,GAAX,mBAAuBqB,OACnCH,EAAW,QAkBT,cAACR,EAAD,CAAWC,SAAUA,EAAUC,aAdd,SAACc,GACpBP,GAAY,SAACE,GAAD,OAAUA,EAAKM,QACzB,SAACC,GAAD,OAAUA,EAAKd,KAAOY,cCtC5B,IAYeG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fd3d8378.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function NewTask({ newTask, handleChange, handleSubmit })\n{\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        name=\"title\"\n        placeholder=\"New task\"\n        value={newTask.title || \"\"}\n        onChange={handleChange}\n      />\n      <button type=\"submit\">Add Task</button>\n      {/* {!newTask.title ? null : (\n        <>\n          <textarea\n            name=\"description\"\n            placeholder=\"Details...\"\n            value={newTask.description || \"\"}\n            onChange={handleChange}\n          />\n          <button type=\"submit\">Add Task</button>\n        </>\n      )} */}\n    </form>\n  );\n}","import React from \"react\";\n\nexport default function TasksList({ allTasks, handleDelete }) {\n  return (\n    <ul>\n      {allTasks.map(({ title, id }) => (\n        <li key={id}>\n          <div>\n            <h2>{title}</h2>\n            <button onClick={() => handleDelete(id)}>X</button>\n          </div>\n        </li>\n      ))}\n    </ul>\n  );\n}","import React, { useState } from \"react\";\nimport NewTask from \"./NewTask\";\nimport TasksList from \"./TaskList\";\n\nexport default function A_TodoList() {\n\n    // Declare a new state variable, which we'll call \"newTask\"\n    // second returned item is itself a function and it update the newTask\n  const [newTask, setNewTask] = useState({});\n\n  const handleChange = ({ target }) => {\n\n      //const name = e.target.name \n    //const value = e.target.value \n    const { name, value } = target;  //object destructuring to extract the name and the value attributes from our inputs \n    \n   \n    setNewTask((prev) => ({ \n        ...prev, // ..., the spread operator, to fill in the corresponding fields from our previous state.\n        id: Date.now(), \n        //[name]: value here means that we're setting a dynamic name property key\n        [name]: value  //updating the value of the event. Eg:- title: e.target.value;\n    }));\n  };\n\n  const [allTasks, setAllTasks] = useState([]);\n  const handleSubmit = (event) => {\n\n    event.preventDefault();\n    if (!newTask.title) return;\n    // add the newTask into allTask array.\n    setAllTasks((prev) => [newTask, ...prev]);\n    setNewTask({});\n  };\n\n\n  const handleDelete = (taskIdToRemove) => {\n    setAllTasks((prev) => prev.filter(\n      (task) => task.id !== taskIdToRemove\n    ));\n  };\n\n  return (\n    <main>\n      <h1>TODO-LIST</h1>\n      <NewTask\n        newTask={newTask}\n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <TasksList allTasks={allTasks} handleDelete={handleDelete} />\n    </main>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './component/Apps/A_TodoList';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}